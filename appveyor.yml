image: ubuntu
platform: Any CPU

environment:
  version: ${APPVEYOR_BUILD_VERSION}


install:
  - sh: dotnet tool install --global coverlet.console 
  - sh: dotnet add JsonMasking.Tests/JsonMasking.Tests.csproj package coverlet.msbuild
  - sh: dotnet restore

configuration:
- Release

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '${version}'
  package_version: '${version}'
  assembly_version: '${version}'
  file_version: '${version}'
  informational_version: '${version}'

build:
  project: JsonMasking.sln

test_script:
  # Run test and generate result with opencover and cobertura format
  - sh: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage /p:Exclude=[xunit.*]* JsonMasking.sln
  - sh: mv ./JsonMasking.Tests/coverage.opencover.xml opencover.xml 
  - sh: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=coverage /p:Exclude=[xunit.*]* JsonMasking.sln
  - sh: mv ./JsonMasking.Tests/coverage.cobertura.xml cobertura.xml 
  # Send test result to codecov
  - sh: bash <(curl -s https://codecov.io/bash) -f .\opencover.xml -t ${CODECOV_TOKEN}
  # Send test result to codeclimate
  - sh: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - sh: chmod +x ./cc-test-reporter
  - sh: ./cc-test-reporter before-build
  - sh: ./cc-test-reporter after-build --coverage-input-type cobertura --exit-code $?
  

after_test:
  - dotnet pack --configuration Release /p:Version=%version%

artifacts:
  - path: JsonMasking/bin/Release/netstandard2.0/JsonMasking.dll
    name: JsonMasking.dll
  - path: JsonMasking/bin/Release/JsonMasking.%version%.nupkg
    name: JsonMasking.%version%.nupkg

deploy:
  provider: NuGet
  api_key:
    secure: csyDlyeSjDmdYAQ/PK0GYNZ4ofK/yC6vd5ZLPnG2TgujmrAW7fUiQxjDVOWD4XAX